# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ViewshedAnalysis
                                 A QGIS plugin
 This plugin analyzes the viewshed of a certain point in topology
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-11-15
        copyright            : (C) 2022 by DEETU
        email                : dhd_520@pku.edu.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'DEETU'
__date__ = '2022-11-15'
__copyright__ = '(C) 2022 by DEETU'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsRasterLayer)
from qgis.PyQt.QtCore import QCoreApplication

from .utils import get_band_data, get_raster_config, save_raster
from .algorithm_sample import viewshed_demo


class ViewshedAnalysisAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'viewshed'
    POINT = 'point'
    HEIGHT = 'height'
    DEM = 'DEM'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. 
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.POINT,
                self.tr('View Point layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # add a field parameter
        self.addParameter(
            QgsProcessingParameterField(
                self.HEIGHT,
                self.tr('Choose Height Field'),
                parentLayerParameterName=self.POINT
            )
        )
        
        # add a input dem parameter
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('DEM Layer'),
                [QgsProcessing.TypeRaster]
            )
        )

        # set an output raster layer
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Viewshed layer')
            )
        )
        


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        source = self.parameterAsSource(parameters, self.POINT, context)
        dem = self.parameterAsRasterLayer(parameters, self.DEM, context)
        dest_url = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
        height_field = self.parameterAsString(parameters, self.HEIGHT, context)

        # get features from source
        features = source.getFeatures()

        # * 用pushDebugInfo的方法来输出log，目前好像只能通过这样的方法来debug，
        # * 那个远程debugger不知道为何不work
        # * 有很多种不同的pushInfo的等级，详见文档

        # show error message if the feature count is 0
        if source.featureCount() == 0:
            feedback.reportError(self.tr('The input layer has no features!'))
            return {};
        
        # show warning message if the feature count more than 1
        if source.featureCount() > 1:
            feedback.pushWarning(self.tr('The input layer has more than one feature!'))

        # get the height field of source
        


        # get raster bands number
        count = dem.bandCount()
        # show error message if the raster has more than one band
        if count > 1:
            feedback.reportError(self.tr('The raster has more than one band!'))
            return {}
        
        # show warning message if the raster and the source have different CRS
        if dem.crs() != source.sourceCrs():
            feedback.pushWarning(self.tr('The raster and the source have different CRS!'))
        
        # get DEM data
        url = dem.dataProvider().dataSourceUri()
        dem_data = get_band_data(url, 1)
        
        # A example of setting process progress
        # * 实际上这里的progress条可以你们自己设计算法的时候找个指标来搞
        # Compute the number of steps to display within the progress bar and
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
        
            height = feature[height_field]
            point = feature.geometry().asPoint()
            
            feedback.pushDebugInfo('height: {}'.format(height))
            feedback.pushDebugInfo('geometry: {}'.format(point))
            # Update the progress bar
            feedback.setProgress(int(current * total))
            break # 这里偷懒了，features是一个iterator，但是我们只取第一个feature就行了

        raster_config = get_raster_config(dem)
        result = viewshed_demo(point.x(), point.y(), height, dem_data, raster_config)

        # Save results to the output
        try :
            save_raster(dest_url,result,raster_config)
        except Exception as e:
            # if ValueError show error message
            if isinstance(e, ValueError):
                feedback.reportError(self.tr(str(e)))
            else:
                feedback.reportError(self.tr('Failed to save raster!\n'+str(e)))
            return {}
        # generate the output layer
        dest = QgsRasterLayer(dest_url, 'viewshed')
        # Return the results of the algorithm. 
        return {self.OUTPUT:dest}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Viewshed analysis'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ViewshedAnalysisAlgorithm()

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and
        the parameters and outputs associated with it.
        """
        return self.tr(
            "Viewshed analysis for a point vector layer and a DEM raster layer.\n"
            + "The input point layer is a point layer with a height field.\n"
            + "The input DEM layer is a DEM raster\n"
            + "The output layer is a binary Raster layer. Places that can be view at the selected point are marked as 1\n") 